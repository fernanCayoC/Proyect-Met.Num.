// ---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "Unit2.h"
// ---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm2 *Form2;

// ---------------------------------------------------------------------------
__fastcall TForm2::TForm2(TComponent* Owner) : TForm(Owner) {
}

// ---------------------------------------------------------------------------
void burbuja(int &n) {
	if (n >= 10) {
		int d = n % 10;
		n = n / 10;
		burbuja(n);
		int d2 = n % 10;
		n = n / 10;
		if (d < d2)
			n = (n * 10 + d2) * 10 + d;
		else
			n = (n * 10 + d) * 10 + d2;
	}
}

void ordBurbuja(int &n) {
	if (n >= 10) {
		burbuja(n);
		int d = n % 10;
		n = n / 10;
		ordBurbuja(n);
		n = n * 10 + d;
	}
}

void __fastcall TForm2::ORDENAMIENTOBURBUJA1Click(TObject *Sender) {
	int n = StrToInt(E1->Text);
	ordBurbuja(n);
	E2->Text = n;
}

// ---------------------------------------------------------------------------
void unirDosNros(int n, int n2, int &z) {
	if (n2 < 10) {
		z = n * 10 + n2;
	}
	else {
		int d = n2 % 10;
		n2 = n2 / 10;
		unirDosNros(n, n2, z);
		z = (z * 10) + d;
	}
}

void __fastcall TForm2::UNIR2NUMEROS1Click(TObject *Sender) {
	int n = StrToInt(E1->Text);
	int n2 = StrToInt(InputBox("Ingrese N2 : ", "", ""));
	int z = 0;
	unirDosNros(n, n2, z);
	E2->Text = z;
}

// ---------------------------------------------------------------------------
String literal(int n) {
	String lit = "";
	if (n > 0) {
		double d = n % 10;
		lit = literal(n / 10);
		double s = d * ((pow(10, d) - 1) / 9);
		lit = lit + FloatToStr(s);
	}
	return lit;
}

void __fastcall TForm2::CADENASLITERAL1Click(TObject *Sender) {
	int n = StrToInt(E1->Text);
	E2->Text = literal(n);
}

// ---------------------------------------------------------------------------
// separar pares e impares de un numero
void separarParesImpares(int z, int &x, int &y) {
	if (z > 0) {
		byte a = z % 10;
		separarParesImpares(z / 10, x, y);
		if (a % 2 == 0) {
			x = x * 10 + a;
		}
		else {
			y = y * 10 + a;
		}
	}
}

void __fastcall TForm2::SEPARARPARESEIMPARES1Click(TObject *Sender) {
	int z = StrToInt(E1->Text);
	int x = 0;
	int y = 0;
	separarParesImpares(z, x, y);
	E2->Text = String(z) + " pares: " + String(x) + " impares: " + String(y);
}

// ---------------------------------------------------------------------------
// V-> 234, 1221, 645, 7 => x -> 7514
int intVector(TStringGrid*V, double n) {
	double x = 0;
	if (n > 0) {
		x = (StrToInt(V->Cells[n - 1][0]) % 10) * pow(10, n - 1) +
			intVector(V, n - 1);
	}
	return x;
}

void __fastcall TForm2::ULTIMODIGITOVECTORANATURAL1Click(TObject *Sender) {
	ShowMessage(intVector(SG2, SG2->ColCount));
}

// ---------------------------------------------------------------------------
// mostrar  x -> 3461  =>  3,  34,  346,  3461
void mostrarSerie(int x) {
	if (x > 0) {
		mostrarSerie(x / 10);
		ShowMessage(x);
	}
}

void __fastcall TForm2::N346133434634611Click(TObject *Sender) {
	int x = StrToInt(InputBox("", "num= ", ""));
	mostrarSerie(x);
}

// ---------------------------------------------------------------------------
// Programa que elimina los dígitos pares de un número
void EliminarPares(Cardinal &n) {
	if (n < 10) {
		if (n % 2 == 0)
			n = 0;
	}
	else {
		byte d;
		d = n % 10;
		n = n / 10;
		EliminarPares(n);
		if (d % 2 == 1)
			n = n * 10 + d;
	}
}

void __fastcall TForm2::ELIMINARDIGITOSPARESDEUNNUMERO1Click(TObject *Sender) {
	Cardinal n = StrToInt(InputBox("ELIMINAR DIGITOS PARES",
		"Digite un número: ", ""));
	EliminarPares(n);
	ShowMessage(n);
}
// ---------------------------------------------------------------------------
// cad -> "hola23 que tal 47" => 2347
String num = "0123456789";

Cardinal cargarNumeros(String cad) {
	int x = 0;
	byte n = cad.Length();
	if (cad != "") {
		wchar_t z = cad[n];
		cad.Delete(n, 1);
		x = cargarNumeros(cad);
		if (num.Pos(z) > 0) {
			x = (x * 10) + StrToInt(z);
		}
	}
	return x;
}

void __fastcall TForm2::DEVOLVERNUMEROSDEUNACADENA1Click(TObject *Sender) {
	String cad = InputBox("INGRESE CADENA", "cad= ", "");
	ShowMessage(cargarNumeros(cad));
}

// ---------------------------------------------------------------------------
String PalabraMax(String cad) {
	String PalMax = "";
	int n = cad.Length();
	if (n > 0) {
		int pos = cad.LastDelimiter(' ');
		String aux = cad.SubString(pos + 1, n - pos);
		cad.SetLength(pos - 1);
		PalMax = PalabraMax(cad);
		if (aux.Length() > PalMax.Length()) {
			PalMax = aux;
		}
	}
	return PalMax;
}

void __fastcall TForm2::PALABRAMASLARGA1Click(TObject *Sender) {
	String cad = E1->Text;
	E2->Text = PalabraMax(cad);
}

// ---------------------------------------------------------------------------
void eliminarPrimLetra(String &cad) {
	int n = cad.Length();
	if (n > 0) {
		int pos = cad.LastDelimiter(' ');
		String pal = cad.SubString(pos + 1, n - pos);
		cad.SetLength(pos - 1);
		eliminarPrimLetra(cad);
		cad = cad + pal.SubString(2, pal.Length() - 1) + " ";
	}

}

void __fastcall TForm2::ELIMINARPRIMERALETRA1Click(TObject *Sender) {
	String cad = E1->Text;
	eliminarPrimLetra(cad);
	E2->Text = cad;
}

// ---------------------------------------------------------------------------
String generarPrimLetrasCad(TStringGrid *v, int n) {
	String cad = "";
	if (n > 0) {
		String pal = v->Cells[n - 1][0];
		cad = generarPrimLetrasCad(v, n - 1);
		cad = cad + pal[1];
	}
	return cad;
}

void __fastcall TForm2::PRIMERALETRADECADAPOSICIONDELVECTOR1Click
	(TObject *Sender) {
	int n = StrToInt(E1->Text);
	E2->Text = generarPrimLetrasCad(SG2, n);
}

// ---------------------------------------------------------------------------
// cantidad de veces que se repite un caracter en una cadena
byte CantidadVeces(String x, char y) {
	byte c = 0;
	if (x.Length() > 0) {
		char z = x[x.Length()];
		x.Delete(x.Length(), 1);
		if (z == y) {
			c++;
		}
		c = c + CantidadVeces(x, y);
	}
	return c;
}

void __fastcall TForm2::CANTIDADDECARACTERENUNACADENA1Click(TObject *Sender) {
	char y = InputBox("Cantidad de Veces Repetida",
		"Digite el Caracter a Comparar:", "a")[1];
	E2->Text = IntToStr(CantidadVeces(E1->Text, y));
}

// ---------------------------------------------------------------------------
void InvertirCad(String &cad) {
	if (cad != "") {
		char z = cad[1];
		cad.Delete(1, 1);
		InvertirCad(cad);
		cad = cad + z;
	}
}

void __fastcall TForm2::INVERTIRUNACADENA1Click(TObject *Sender) {
	String cad = E1->Text;
	InvertirCad(cad);
	E1->Text = cad;
}

// ---------------------------------------------------------------------------
// eliminar vocales de una cadena
void eliminarVocales(String &cad, String &s) {
	if (cad != "") {
		String voc = "aeiouAEIOU";
		String z = cad[cad.Length()];
		cad = cad.Delete(cad.Length(), 1);
		eliminarVocales(cad, s);
		s = s + z;
		if (voc.Pos(z) > 0) {
			s = s.Delete(s.Length(), 1);
		}
	}
}

void __fastcall TForm2::ELIMINARVOCALESDEUNACADENA1Click(TObject *Sender) {
	String cad = InputBox("", "cad =", "");
	String s = "";
	eliminarVocales(cad, s);
	ShowMessage(s);
}

// ---------------------------------------------------------------------------
// Separar vocales y consunantes de una cadena
void separarVocYCons(String cad, String &vocales, String &consonantes) {
	if (cad != "") {
		String voc = "aeiouAEIOU";
		String z = cad[cad.Length()];
		cad = cad.Delete(cad.Length(), 1);
		separarVocYCons(cad, vocales, consonantes);
		if (voc.Pos(z) > 0) {
			vocales = vocales + z;
		}
		else {
			consonantes = consonantes + z;
		}
	}
}

void __fastcall TForm2::SEPARARVOCALESYCONSONANTESDEUNACADENA1Click
	(TObject *Sender) {
	String cad = InputBox("", "cad= ", "");
	String vocales = "";
	String consonantes = "";
	separarVocYCons(cad, vocales, consonantes);
	ShowMessage("Cadena original: " + cad + " Vocales: " + vocales +
		" Consonantes: " + consonantes);
}

// ---------------------------------------------------------------------------
String eliminar(String &x) {
	String voc = "aeiouAEIOU";
	int n = x.Length();
	if (n > 0) {
		char s = x[n];
		x.SetLength(n - 1);
		eliminar(x);
		if (voc.Pos(s) != 0) {
			x = x + s;
		}
	}
	return x;
}

void vectorpal(TStringGrid*v, String x) {
	int n = x.Length();
	if (n > 0) {
		int p = x.LastDelimiter(' ');
		String cad = x.SubString(p + 1, n - p);
		x.SetLength(p - 1);
		vectorpal(v, x);
		String h = eliminar(cad);
		if (h != "") {
			v->Cells[v->ColCount - 1][0] = h;
			v->ColCount++;
		}
	}
}

void __fastcall TForm2::SOLOVOCALESDEPALABRASENUNVECTOR1Click(TObject *Sender) {
	String cad = E1->Text;
	SG2->ColCount = 1;
	vectorpal(SG2, cad);
	SG2->ColCount--;
}

// ---------------------------------------------------------------------------
void CargarVector(TStringGrid *v, byte n, byte MaxRnd) {
	if (n > 0) {
		CargarVector(v, n - 1, MaxRnd);
		v->Cells[n - 1][0] = Random(MaxRnd);
	}
}

void __fastcall TForm2::CARGARVECTOR1Click(TObject *Sender) {
	SG2->ColCount = StrToInt(E1->Text);
	CargarVector(SG2, StrToInt(E1->Text), StrToInt(E2->Text));
}
// ---------------------------------------------------------------------------
String voc = "aeiouAEIOUáéíóúÁÉÍÓÚ";

void cargarVocales(TStringGrid *v, String cad) {
	int n = cad.Length();
	if (n > 0) {
		char z = cad[n];
		cad.SetLength(n - 1);
		cargarVocales(v, cad);
		if (voc.Pos(z) > 0) {
			v->Cells[v->ColCount - 1][0] = z;
			v->ColCount++;
		}
	}
}

void __fastcall TForm2::CARGARVOCALESDECADENAS1Click(TObject *Sender) {
	SG2->ColCount = 1;
	String cad = E1->Text;
	cargarVocales(SG2, cad);
	SG2->ColCount--;
}

// ---------------------------------------------------------------------------
void cargarVectorCadenas(TStringGrid *v, int n) {
	if (n > 0) {
		cargarVectorCadenas(v, n - 1);
		v->Cells[n - 1][0] = InputBox("", "", "");
	}
}

void __fastcall TForm2::CARGARVECTORCONCADENAS1Click(TObject *Sender) {
	int n = StrToInt(E1->Text);
	SG2->ColCount = n;
	cargarVectorCadenas(SG2, n);
}

// ---------------------------------------------------------------------------
// cad = "hola como estas" => V-> h, c, e
void primerPalabra(String &cad, String &s) {
	if (cad != "") {
		char z = cad[1];
		cad.Delete(1, 1);
		if (z == ' ' || cad == "") {
			return;
		}
		else {
			s = s + z;
		}
		primerPalabra(cad, s);
	}
}

void cargar(TStringGrid*V, String cad, byte &n) {
	if (cad != "") {
		String s = "";
		cad.TrimLeft();
		primerPalabra(cad, s);
		V->Cells[n - 1][0] = s[1];
		n = n + 1;
		cargar(V, cad, n);
	}
}

void __fastcall TForm2::PRIMERLETRADEPALABRAENUNVECTOR1Click(TObject *Sender) {
	String cad = InputBox("", "cad = ", "") + " ";
	byte n = 1;
	cargar(SG2, cad, n);
	SG2->ColCount = n - 1;
}

// ---------------------------------------------------------------------------
// cargar los numeros de una cadena en un vector
// cad -> "ho2la m4undo 3" => V->2,4,3
void cargarNumeros(TStringGrid * V, String cad, byte &n) {
	if (cad != "") {
		String voc = "0123456789";
		String z = cad[cad.Length()];
		cad = cad.Delete(cad.Length(), 1);
		cargarNumeros(V, cad, n);
		if (voc.Pos(z) > 0) {
			V->Cells[n - 1][0] = z;
			n++;
		}
	}
}

void __fastcall TForm2::CARGARNUMEROSDECADENAENUNVECTOR1Click(TObject *Sender) {
	String cad = InputBox("", "cad= ", "");
	byte n = 1;
	cargarNumeros(SG2, cad, n);
	SG2->ColCount = n - 1;
}

// ---------------------------------------------------------------------------
// V-> 5, 9, 21, 29, 37
byte serie(byte n, byte &i, byte &s, byte &w) {
	if (n == 1)
		return 5;
	if (s == w) {
		s++;
		w = 0;
	}
	else {
		w++;
	}
	return serie(n - 1, i, s, w) + (i * s);
}

void cargarV(TStringGrid *V, byte n) {
	if (n > 0) {
		byte i = 4;
		byte s = 1;
		byte w = 0;
		V->Cells[n - 1][0] = serie(n, i, s, w);
		cargarV(V, n - 1);
	}
}

void __fastcall TForm2::CARGARSERIEENUNVECTORClick(TObject *Sender) {
	byte n = StrToInt(InputBox("", "n = ", ""));
	cargarV(SG2, n);
	SG2->ColCount = n;
}

// ---------------------------------------------------------------------------
void cargarVocales2(TStringGrid * V, String cad, byte &n) {
	if (cad != "") {
		String voc = "aeiouAEIOU";
		String z = cad[cad.Length()];
		cad = cad.Delete(cad.Length(), 1);
		cargarVocales2(V, cad, n);
		if (voc.Pos(z) > 0) {
			V->Cells[n - 1][0] = z;
			n++;
		}
	}
}

void __fastcall TForm2::CARGARVOCALESDECADENAS21Click(TObject *Sender) {
	String cad = InputBox("INGRESE CADENA", "cadena: ", "");
	byte n = 1;
	cargarVocales2(SG2, cad, n);
	SG2->ColCount = n - 1;
}

// ---------------------------------------------------------------------------
int SumarElementos(TStringGrid *B, byte n) {
	int s;
	if (n == 0)
		s = 0;
	else {
		s = StrToInt(B->Cells[n - 1][0]);
		s += SumarElementos(B, n - 1);
	}
	return s;
}

void __fastcall TForm2::SUMARELEMENTOS1Click(TObject *Sender) {
	ShowMessage(SumarElementos(SG2, SG2->ColCount));
}

// ---------------------------------------------------------------------------
void NumAVector(TStringGrid *B, int n, byte a) {
	if (n < 10)
		B->Cells[0][0] = n;
	else {
		B->Cells[a - 1][0] = n % 10;
		NumAVector(B, n / 10, a - 1);
	}
}

void __fastcall TForm2::CONVERTIRNUMEROENVECTOR1Click(TObject *Sender) {
	String n = (InputBox("NUMERO A VECTOR",
		"Introduzca el valor a convertir:", "1"));
	SG2->ColCount = n.Length();
	NumAVector(SG2, StrToInt(n), SG2->ColCount);
}

// ---------------------------------------------------------------------------
// Sumar elementos de un vector indicando donde empieza y donde termina
int SumaPorPartes(TStringGrid *B, byte a, byte b) {
	if (a == b)
		return StrToInt(B->Cells[a - 1][0]);
	else if (a < b)
		return SumaPorPartes(B, a + 1, b) + StrToInt(B->Cells[a - 1][0]);
}

void __fastcall TForm2::SUMADEVECTORDESDEPOSICIONINICIALHASTAPOSICIONFINAL1Click
	(TObject *Sender) {
	byte a = StrToInt(InputBox("VALOR INICIAL", "valor para a:", "1"));
	byte b = StrToInt(InputBox("VALOR FINAL", "valor para b:", "1"));
	ShowMessage(IntToStr(SumaPorPartes(SG2, a, b)));
}

// ---------------------------------------------------------------------------
// Carga un vector randomicamente del 0 al 19
void cargarVector2(TStringGrid *V, byte n) {
	if (n > 0) {
		V->Cells[n - 1][0] = Random(20);
		cargarVector2(V, n - 1);
	}
}

void __fastcall TForm2::CARGARVECTOR21Click(TObject *Sender) {
	byte n = StrToInt(InputBox("", "n= ", ""));
	cargarVector2(SG2, n);
	SG2->ColCount = n;
}

// ---------------------------------------------------------------------------
// devolver el mayor y el menor de los elementos del vector
void mayMen(TStringGrid *V, byte n, byte &ma, byte &me) {
	if (n > 0) {
		byte x = StrToInt(V->Cells[n - 1][0]);
		if (x > ma)
			ma = x;
		if (x < me)
			me = x;
		mayMen(V, n - 1, ma, me);
	}
}

void __fastcall TForm2::DEVOLVERELMAYORYELMENORDELOSELEMENTOSDELVECTOR1Click
	(TObject *Sender) {
	byte ma = 0;
	byte me = 127;
	// el mayor numero posible que puede estar almacenado en una casilla
	mayMen(SG2, SG2->ColCount, ma, me);
	ShowMessage("Mayor = " + IntToStr(ma) + " Menor = " + IntToStr(me));
}

// ---------------------------------------------------------------------------
void CargarDigRepetidos(TStringGrid *v, int x) {
	if (x > 0) {
		CargarDigRepetidos(v, x / 10);
		double s = x % 10;
		if (s > 0) {
			v->Cells[v->ColCount - 1][0] = s * ((pow(10, s) - 1) / 9);
			v->ColCount++;
		}
	}
}

void __fastcall TForm2::CARGARDIGITOSREPETIDOS1Click(TObject *Sender) {
	int x = StrToInt(InputBox("CARGAR DIGITOS REPETIDOS",
		"Ingrese valor", "2"));
	SG2->ColCount = 1;
	CargarDigRepetidos(SG2, x);
	SG2->ColCount--;
}

// ---------------------------------------------------------------------------
void cargarFila1(TStringGrid *v, byte m, byte n) {
	byte N = v->ColCount;
	if (n > 0) {
		cargarFila1(v, m, n - 1);
		if (m % 2 == 0) {
			v->Cells[n - 1][m] = (m * N + n);
		}
		else {
			v->Cells[N - n][m] = (m * N + n);
		}
	}
}

void cargarM1(TStringGrid *v, byte m, byte n) {
	if (m > 0) { // 1  2  3  4
		cargarM1(v, m - 1, n); // 8  7  6  5
		cargarFila1(v, m - 1, n); // 9 10 11 12
	} // 16 15 14 13
}

void __fastcall TForm2::MATRIZVIBORA11Click(TObject *Sender) {
	byte m = StrToInt(InputBox("Cantidad Filas", "m:", ""));
	byte n = StrToInt(InputBox("Cantidad columnas", "n:", ""));
	SG1->RowCount = m;
	SG1->ColCount = n;
	cargarM1(SG1, m, n);
}

// ---------------------------------------------------------------------------
void cargarFila2(TStringGrid *v, byte m, byte n, byte nc) {
	if (n > 0) {
		cargarFila2(v, m, n - 1, nc);
		if (m % 2 == 0) {
			v->Cells[nc - n][m] = (m * nc + n);
		}
		else {
			v->Cells[n - 1][m] = (m * nc + n);
		}
	}
}

void cargarM2(TStringGrid *v, byte m, byte n) {
	if (m > 0) { // 4  3  2  1
		cargarM2(v, m - 1, n); // 5  6  7  8
		cargarFila2(v, m - 1, n, n); // 12 11 10  9
	} // 13 14 15 16
}

void __fastcall TForm2::MATRIZVIBORA21Click(TObject *Sender) {
	byte m = StrToInt(InputBox("Cantidad Filas", "m:", ""));
	byte n = StrToInt(InputBox("Cantidad columnas", "n:", ""));
	SG1->RowCount = m;
	SG1->ColCount = n;
	cargarM2(SG1, m, n);
}

// ---------------------------------------------------------------------------
void cargarCol1(TStringGrid *v, byte m, byte n, byte mf) {
	if (m > 0) {
		cargarCol1(v, m - 1, n, mf);
		if (n % 2 == 0) {
			v->Cells[n][m - 1] = (n * mf + m);
		}
		else {
			v->Cells[n][mf - m] = (n * mf + m);
		}
	}
}

void cargarM3(TStringGrid *v, byte m, byte n) {
	if (n > 0) { // 1 8  9 16
		cargarM3(v, m, n - 1); // 2 7 10 15
		cargarCol1(v, m, n - 1, m); // 3 6 11 14
	} // 4 5 12 13
}

void __fastcall TForm2::MATRIZVIBORA31Click(TObject *Sender) {
	byte m = StrToInt(InputBox("Cantidad Filas", "m:", ""));
	byte n = StrToInt(InputBox("Cantidad Columnas", "n:", ""));
	SG1->RowCount = m;
	SG1->ColCount = n;
	cargarM3(SG1, m, n);
}

// ---------------------------------------------------------------------------
void cargarCol2(TStringGrid *v, byte m, byte n, byte mf) {
	if (m > 0) {
		cargarCol2(v, m - 1, n, mf);
		if (n % 2 == 0) {
			v->Cells[n][mf - m] = (n * mf + m);
		}
		else {
			v->Cells[n][m - 1] = (n * mf + m);
		}
	}
}

void cargarM4(TStringGrid *v, byte m, byte n) {
	if (n > 0) { // 4 5 12 13
		cargarM4(v, m, n - 1); // 3 6 11 14
		cargarCol2(v, m, n - 1, m); // 2 7 10 15
	} // 1 8  9 16
}

void __fastcall TForm2::MATRIZVIBORA41Click(TObject *Sender) {
	byte m = StrToInt(InputBox("Cantidad Filas", "m:", ""));
	byte n = StrToInt(InputBox("Cantidad Columnas", "n:", ""));
	SG1->RowCount = m;
	SG1->ColCount = n;
	cargarM4(SG1, m, n);
}

// ---------------------------------------------------------------------------
void cargarCol3(TStringGrid *v, byte m, byte n, byte mf) {
	if (m > 0) {
		cargarCol3(v, m - 1, n, mf);
		v->Cells[n][mf - m] = (n + m);
	}
}

void cargarM5(TStringGrid *v, byte m, byte n) {
	if (n > 0) { // 4 5 6 7 8
		cargarM5(v, m, n - 1); // 3 4 5 6 7
		cargarCol3(v, m, n - 1, m); // 2 3 4 5 6
	} // 1 2 3 4 5
}

void __fastcall TForm2::MATRIZEXAMEN11Click(TObject *Sender) {
	byte m = StrToInt(InputBox("Cantidad Filas", "m:", ""));
	byte n = StrToInt(InputBox("Cantidad Columnas", "n:", ""));
	SG1->RowCount = m;
	SG1->ColCount = n;
	cargarM5(SG1, m, n);
}

// ---------------------------------------------------------------------------
void cargarFila3(TStringGrid *v, byte m, byte n, byte nc) {
	if (n > 0) {
		cargarFila3(v, m, n - 1, nc);
		v->Cells[nc - n][m] = (m + n);
	}
}

void cargarM6(TStringGrid *v, byte m, byte n) {
	if (m > 0) { // 5 4 3 2 1
		cargarM6(v, m - 1, n); // 6 5 4 3 2
		cargarFila3(v, m - 1, n, n); // 7 6 5 4 3
	} // 8 7 6 5 4
}

void __fastcall TForm2::MATRIZEXAMEN21Click(TObject *Sender) {
	byte m = StrToInt(InputBox("Cantidad Filas", "m:", ""));
	byte n = StrToInt(InputBox("Cantidad Columnas", "n:", ""));
	SG1->RowCount = m;
	SG1->ColCount = n;
	cargarM6(SG1, m, n);
}

// ---------------------------------------------------------------------------
void cargarFila(TStringGrid *v, byte f, byte i, byte c, byte &t) {
	if (i <= c) {
		v->Cells[i - 1][f - 1] = t;
		t += 1;
		cargarFila(v, f, i + 1, c, t);
	}
}

void cargarM7(TStringGrid *v, byte m, byte i, byte &t) {
	if (i <= m) { // 1
		cargarFila(v, i, m - (i - 1), m, t); // 2  3
		cargarM7(v, m, i + 1, t); // 4 5  6
	} // 7 8 9 10
}

void __fastcall TForm2::MATRIZINFERIOR1Click(TObject *Sender) {
	byte m = StrToInt(InputBox("Cantidad Filas", "m:", ""));
	byte t = 1;
	cargarM7(SG1, m, 1, t);
	SG1->ColCount = m;
	SG1->RowCount = m;
}

// ---------------------------------------------------------------------------
void llenarFilaTSICDSerieNatural(TStringGrid *A, int f, int c, int &k) {
	if (c > 0) {
		llenarFilaTSICDSerieNatural(A, f, c - 1, k);
		int topeCol = (A->ColCount - f);
		if (c - 1 <= topeCol) {
			A->Cells[c - 1][f - 1] = k;
			k++;
		}
	}
}

void TSICDSerieNatural(TStringGrid *A, int f, int c, int &k) {
	if (f > 0) {
		TSICDSerieNatural(A, f - 1, c, k);
		llenarFilaTSICDSerieNatural(A, f, c, k);
	}
}

void __fastcall TForm2::MATRIZSERIENATURAL1Click(TObject *Sender) {
	int n = StrToInt(E1->Text);
	SG1->ColCount = n;
	SG1->RowCount = n;
	int k = 1;
	TSICDSerieNatural(SG1, n, n, k);
}

// ---------------------------------------------------------------------------
// cargar triangular inferior
void cargarFila4(TStringGrid *M, byte f, byte i, byte c, byte &t) {
	if (i <= c) { // 1
		M->Cells[i - 1][f - 1] = t; // 3  5
		t = t + 2; // 7  9  11
		cargarFila4(M, f, i + 1, c, t); // 13  15 17 19
	}
}

void cargarMatrizInferior(TStringGrid *M, byte i, byte m, byte &t) {
	if (i <= m) {
		cargarFila4(M, i, m - (i - 1), m, t);
		cargarMatrizInferior(M, i + 1, m, t);
	}
}

void __fastcall TForm2::MATRIZINFERIOR21Click(TObject *Sender) {
	byte m = StrToInt(InputBox("", "", ""));
	byte i = 1;
	cargarMatrizInferior(SG1, 1, m, i);
	SG1->ColCount = m;
	SG1->RowCount = m;
}

// ---------------------------------------------------------------------------
int fibo(int n) {
	if (n == 1)
		return 0;
	if (n == 2)
		return 1;
	return fibo(n - 1) + fibo(n - 2);
}

void LlenarF(TStringGrid *B, byte m, byte n, byte nc) {
	if (n > 0) // 0 1 1 2
	{ // 3 5 8 13
		LlenarF(B, m, n - 1, nc); // 21 ...
		B->Cells[n - 1][m] = fibo(m * nc + n); //
	}
}

void LlenarM(TStringGrid *B, byte m, byte n) {
	if (m > 0) {
		LlenarM(B, m - 1, n);
		LlenarF(B, m - 1, n, n);
	}
}

void __fastcall TForm2::MATRIZFIBBONACCI1Click(TObject *Sender) {
	byte m = StrToInt(InputBox("MATRIZ CUADRADA FIBBONACI",
		"Digite Dimension:", "3"));
	SG1->ColCount = m;
	SG1->RowCount = m;
	LlenarM(SG1, m, m);
}

// ---------------------------------------------------------------------------
void LlenarFilaComun(TStringGrid *B, byte m, byte n, byte nc) {
	if (n > 0) // 1  2  3  4  5
	{ // 6  7  8  9  10
		LlenarFilaComun(B, m, n - 1, nc); // 11 12 13 14 15
		B->Cells[n - 1][m] = m * nc + n; // 16 17 18 19 20
	} // 21 22 23 24 25
}

void LlenarMatrizComun(TStringGrid *B, byte m, byte n) {
	if (m > 0) {
		LlenarMatrizComun(B, m - 1, n);
		LlenarFilaComun(B, m - 1, n, n);
	}
}

void __fastcall TForm2::MATRIZCOMUN1Click(TObject *Sender) {
	byte m = StrToInt(InputBox("MATRIZ CUADRADA", "Digite dimension: ", "3"));
	SG1->ColCount = m;
	SG1->RowCount = m;
	LlenarMatrizComun(SG1, m, m);
}

// ---------------------------------------------------------------------------
void LlenarPrim(TStringGrid *B, byte f, byte c, byte k) {
	if (f > 0) { // 4 3 2 1
		B->Cells[c - 1][f - 1] = k; // 3 3 2 1
		B->Cells[f - 1][c - 1] = k; // 2 2 2 1
		LlenarPrim(B, f - 1, c, k); // 1 1 1 1
	}
}

void LlenarMagica(TStringGrid *B, byte m, byte k) {
	if (m > 0) {
		LlenarPrim(B, m, m, k);
		LlenarMagica(B, m - 1, k + 1);
	}
}

void __fastcall TForm2::MATRIZMAGICA1Click(TObject *Sender) {
	byte m = StrToInt(InputBox("MATRIZ MAGICA", "Digite dimension: ", "2"));
	SG1->ColCount = m;
	SG1->RowCount = m;
	LlenarMagica(SG1, m, 1);
}

// ---------------------------------------------------------------------------
void cargarFil(TStringGrid *M, byte f, byte i, byte c, byte t) {
	if (i <= c) {
		M->Cells[i - 1][f - 1] = t;
		cargarFil(M, f, i + 1, c, t + 1);
	}
}

void cargarMat(TStringGrid *M, byte i, byte f, byte c) {
	if (i <= f) { // 1  2  3  4
		cargarFil(M, i, i, c, 1); // 1  2  3
		cargarMat(M, i + 1, f, c); // 1  2
	}
}

void __fastcall TForm2::MATRIZSUPERIOR11Click(TObject *Sender) {
	byte f = StrToInt(InputBox("", "f= ", ""));
	byte c = StrToInt(InputBox("", "c= ", ""));
	cargarMat(SG1, 1, f, c);
	SG1->ColCount = c;
	SG1->RowCount = f;
}

// ---------------------------------------------------------------------------
void LlenarFilaL(TStringGrid *v, byte m, byte n, byte k) {
	if (n > 0) {
		v->Cells[m - 1][n - 1] = k;
		v->Cells[n - 1][m - 1] = k;
		k++;
		LlenarFilaL(v, m, n - 1, k);
	}
}

void MatrizL(TStringGrid *v, byte m, byte n, byte &k) {
	if (m > 0) {
		LlenarFilaL(v, m, n, k);
		MatrizL(v, m - 1, n, k);
	}
}

void __fastcall TForm2::MATRIZENFORMADEL1Click(TObject *Sender) {
	byte m = StrToInt(InputBox("MATRIZ FORMA DE L", "Digite dimension: ", "2"));
	SG1->ColCount = m;
	SG1->RowCount = m;
	byte k = 1;
	MatrizL(SG1, m, m, k);
}
// ---------------------------------------------------------------------------

void LlenarTSI1(TStringGrid *v, byte m, byte n, byte &k) {
	if (n > 0) {
		LlenarTSI1(v, m, n - 1, k);
		int tope = v->RowCount - m;
		if (n - 1 <= tope) {
			v->Cells[n - 1][m - 1] = k;
			k++;
		}
	}
}

void MatrizTSI(TStringGrid *v, byte m, byte n) {
	if (m > 0) {
		MatrizTSI(v, m - 1, n);
		LlenarTSI1(v, m, n, m);
	}
}

void __fastcall TForm2::MATRIZTRIANGULARSUPERIORIZQUIERDA1Click(TObject *Sender)
{
	byte m = StrToInt(InputBox("MATRIZ TRIANGULAR SUPERIOR",
		"Digite dimension: ", "2"));
	SG1->ColCount = m;
	SG1->RowCount = m;
	MatrizTSI(SG1, m, m);
}

// ---------------------------------------------------------------------------
String ElimVoc(String cad) {
	int n = cad.Length();
	String Voc = "aeiouáéíóúAEIOUÁÉÍÓÚ";
	String s = "";
	if (n > 0) {
		String letra = cad[cad.Length()];
		cad.Delete(cad.Length(), 1);
		s = ElimVoc(cad);
		if (Voc.Pos(letra) == 0 && letra != ' ')
			s = s + letra;
	}
	return s;
}

void CargarVectorMM2(TStringGrid *v, int n, int nf, String &cad) {
	if (n > 0) {
		CargarVectorMM2(v, n - 1, nf, cad);
		if (cad.Length() > 0) {
			v->Cells[n - 1][nf] = cad[1];
			cad.Delete(1, 1);
		}
	}
}

void CargarMM2(TStringGrid *v, int nf, int nc, String &cad)
{ // nf =real,nc =cand
	if (nf > -1) {
		CargarMM2(v, nf - 1, nc, cad);
		CargarVectorMM2(v, nc, nf, cad);
	}
}

void __fastcall TForm2::CONSONANTESENUNAMATRIZ1Click(TObject *Sender) {
	SG1->RowCount = E1->Text.ToInt();
	SG1->ColCount = E2->Text.ToInt();
	String cad = InputBox("", "Ingrese cadena", "");
	cad = ElimVoc(cad);
	CargarMM2(SG1, SG1->RowCount, SG1->ColCount, cad);
}
// ---------------------------------------------------------------------------

void cargarcolt1(TStringGrid *v, byte fa, byte fb, byte ca, byte cb, byte &k) {
	byte n = cb - ca + 1;
	if (n > 0) {
		v->Cells[cb][fa] = k++;
		cargarcolt1(v, fa, fb, ca, cb - 1, k);
	}
}

void cargarfilt1(TStringGrid *v, byte fa, byte fb, byte ca, byte cb, byte &k) {
	byte m = fb - fa + 1;
	if (m > 0) {
		cargarcolt1(v, fa, fb, ca, cb, k);
		cargarfilt1(v, fa + 1, fb, ca - 1, cb, k);
	}
}

void __fastcall TForm2::triangular1Click(TObject *Sender) {
	/*
	 0	0	6
	 0	4	5
	 1	2	3
	 */
	byte n = StrToInt(InputBox("ORDEN", "nro", ""));
	SG1->ColCount = n;
	SG1->RowCount = n;
	byte k = 1;
	cargarfilt1(SG1, 0, n - 1, n - 1, n - 1, k);
}
// ---------------------------------------------------------------------------

void derecha(TStringGrid *v, byte fa, byte fb, byte ca, byte cb, byte &k) {
	byte n = cb - ca + 1;
	if (n > 0) {
		v->Cells[ca][fa] = k++;
		derecha(v, fa, fb, ca + 1, cb, k);
	}
}

void abajo(TStringGrid *v, byte fa, byte fb, byte ca, byte cb, byte &k) {
	byte m = fb - fa + 1;
	if (m > 0) {
		v->Cells[cb][fa] = k++;
		abajo(v, fa + 1, fb, ca, cb, k);
	}
}

void izquierda(TStringGrid *v, byte fa, byte fb, byte ca, byte cb, byte &k) {
	byte n = cb - ca + 1;
	if (n > 0) {
		v->Cells[cb][fb] = k++;
		izquierda(v, fa, fb, ca, cb - 1, k);
	}
}

void arriba(TStringGrid *v, byte fa, byte fb, byte ca, byte cb, byte &k) {
	byte m = fb - fa + 1;
	if (m > 0) {
		v->Cells[ca][fb] = k++;
		arriba(v, fa, fb - 1, ca, cb, k);
	}
}

void caracol(TStringGrid *v, byte fa, byte fb, byte ca, byte cb, byte &k) {
	byte m = fb - fa + 1;
	byte n = cb - ca + 1;
	if (m * n < 1)
		return;
	if (m * n == 1) {
		v->Cells[fa][ca] = k++;
		return;
	}
	if (fa == fb) {
		derecha(v, fa, fb, ca, cb, k);
		return;
	}
	if (ca == cb) {
		abajo(v, fa, fb, ca, cb, k);
		return;
	}
	derecha(v, fa, fb, ca, cb - 1, k);
	abajo(v, fa, fb - 1, ca, cb, k);
	izquierda(v, fa, fb, ca + 1, cb, k);
	arriba(v, fa + 1, fb, ca, cb, k);
	caracol(v, fa + 1, fb - 1, ca + 1, cb - 1, k);
}

void __fastcall TForm2::hj1Click(TObject *Sender) {
	/*
	 1	2	3
	 8	9	4
	 7	6	5
	 */
	byte m = StrToInt(InputBox("FILAS", "nro:", ""));
	byte n = StrToInt(InputBox("COLUMNAS", "nro", ""));
	SG1->ColCount = n;
	SG1->RowCount = m;
	byte k = 1;
	caracol(SG1, 0, m - 1, 0, n - 1, k);
}

// ---------------------------------------------------------------------------
void cargarH(TStringGrid *v, byte fa, byte fb, byte ca, byte cb, byte &k) {
	byte n = cb - ca + 1;
	if (n > 0) {
		v->Cells[ca][fb] = k++;
		cargarH(v, fa, fb, ca + 1, cb, k);
	}
}

void cargarXD(TStringGrid *v, byte fa, byte fb, byte ca, byte cb, byte &k) {
	byte m = fb - fa + 1;
	if (m > 0) {
		cargarH(v, fa, fb, ca, cb, k);
		cargarXD(v, fa, fb - 1, ca + 1, cb, k);
	}

}

void __fastcall TForm2::trian21Click(TObject * Sender) {
	byte n = StrToInt(InputBox("orden", "n:", ""));
	SG1->ColCount = n;
	SG1->RowCount = n;
	byte k = 1;
	cargarXD(SG1, 0, n - 1, 0, n - 1, k);
}
// ---------------------------------------------------------------------------
